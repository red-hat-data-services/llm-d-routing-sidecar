# Build Stage: using Go 1.24 image
FROM registry.redhat.io/ubi9/go-toolset:1.24@sha256:81d9cb51feb0b56e3d87a73c2237bebaa80b28e4d5791c1da1140eae50225e2f as builder
ARG TARGETOS
ARG TARGETARCH

WORKDIR /workspace
# Copy the Go Modules manifests
COPY go.mod go.mod
COPY go.sum go.sum
# cache deps before building and copying source so that we don't need to re-download as much
# and so that source changes don't invalidate our downloaded layer
RUN go mod download

# Copy the go source
COPY cmd/llm-d-routing-sidecar/main.go cmd/cmd.go
# COPY pkg/ pkg/
COPY internal/ internal/

# Build
# the GOARCH has not a default value to allow the binary be built according to the host where the command
# was called. For example, if we call make image-build in a local env which has the Apple Silicon M1 SO
# the docker BUILDPLATFORM arg will be linux/arm64 when for Apple x86 it will be linux/amd64. Therefore,
# by leaving it empty we can ensure that the container and binary shipped on it will have the same platform.
RUN CGO_ENABLED=0 GOOS=${TARGETOS:-linux} GOARCH=${TARGETARCH} go build -mod=mod -a -o bin/llm-d-routing-sidecar cmd/cmd.go

FROM registry.access.redhat.com/ubi9/ubi:latest
WORKDIR /
COPY --from=builder /workspace/bin/llm-d-routing-sidecar /app/llm-d-routing-sidecar
USER 65532:65532

ENTRYPOINT ["/app/llm-d-routing-sidecar"]

LABEL com.redhat.component="odh-llm-d-routing-sidecar" \
      name="odh-llm-d-routing-sidecar" \
      description="odh-llm-d-routing-sidecar" \
      summary="odh-llm-d-routing-sidecar" \
      io.k8s.display-name="odh-llm-d-routing-sidecar" \
      io.k8s.description="odh-llm-d-routing-sidecar"
